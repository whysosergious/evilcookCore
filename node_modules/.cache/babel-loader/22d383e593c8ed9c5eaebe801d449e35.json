{"ast":null,"code":"import _slicedToArray from\"C:/webWork/olivertwist/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/**\n * Collect hooks, references and other needed data that can be accessed wherever it's imported.\n * Names, structure and methods are all still WIP. As this is the first iteration of the\n * the module.\n */import{useEffect,useState}from'react';// global data, references, functions and hooks\nexport var globalObj={};globalObj.getOffsets=function(group){Object.values(this[group]).forEach(function(e){return e.getOffsetY();});};// blueprint of method object that's copied and merged with the reference object\nvar globalObjMethods={// ref offset getter\ngetOffsetY:function getOffsetY(){this.offsetY=this.ref.offsetTop;},init:function init(group,key,state,dispatch){// initial method with hook assignment\nif(this.ref){this.ref=this.ref.current;// element reference\nthis.ref.zKey=key[0];this.ref.zEl=this;// for easy pairing and execution of dispatch with observer ***check memory usage***\nthis.getOffsetY();}this.state=state;// component 'state'\nthis.setState=dispatch;// component hook 'setState'\n}};/**\n * Global assignment of custom hooks for individual elements\n * @param {React.ElementRef<HTMLElement>} objectEntry\n */export var useGlobalObj=function useGlobalObj(objectEntry){var group=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var key=Object.keys(objectEntry);var _useState=useState(objectEntry[key].initialState||null),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// custom hook\n// when components mounts, we create their object entry\n// and initialize the object\nuseEffect(function(){// we check if the group property is defined and if that group already exist in the global object\nglobalObj[group||key]=globalObj[group]||{};Object.assign(objectEntry[key],globalObjMethods);objectEntry[key].init(group,key,state,setState);Object.assign(globalObj[group||key],group?objectEntry:objectEntry[key]);},[]);return[state,setState];};export default useGlobalObj;/**\n * Known issue **\n *\n * Currently a few component references are not initialized when root is mounted.\n * Requiring recalculation of element offsets. And while we can get them every time directly from the\n * references, those are reads we can spare the browser.\n * We can otherwise get them individually once at the start, and then on known changes.\n */","map":{"version":3,"sources":["C:/webWork/olivertwist/src/logic/zergski-global-object.js"],"names":["useEffect","useState","globalObj","getOffsets","group","Object","values","forEach","e","getOffsetY","globalObjMethods","offsetY","ref","offsetTop","init","key","state","dispatch","current","zKey","zEl","setState","useGlobalObj","objectEntry","keys","initialState","assign"],"mappings":"yGAAA;AACA;AACA;AACA;AACA,GACA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,EAAlB,CACPA,SAAS,CAACC,UAAV,CAAuB,SAASC,KAAT,CAAgB,CACtCC,MAAM,CAACC,MAAP,CAAc,KAAKF,KAAL,CAAd,EAA2BG,OAA3B,CAAoC,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,UAAF,EAAJ,EAArC,EACA,CAFD,CAGA;AACA,GAAMC,CAAAA,gBAAgB,CAAG,CACxB;AACAD,UAFwB,sBAEX,CACZ,KAAKE,OAAL,CAAe,KAAKC,GAAL,CAASC,SAAxB,CACA,CAJuB,CAKxBC,IALwB,eAKlBV,KALkB,CAKXW,GALW,CAKNC,KALM,CAKCC,QALD,CAKY,CAAG;AACtC,GAAK,KAAKL,GAAV,CAAgB,CACf,KAAKA,GAAL,CAAW,KAAKA,GAAL,CAASM,OAApB,CAA8B;AAC9B,KAAKN,GAAL,CAASO,IAAT,CAAgBJ,GAAG,CAAC,CAAD,CAAnB,CACA,KAAKH,GAAL,CAASQ,GAAT,CAAe,IAAf,CAAsB;AACtB,KAAKX,UAAL,GACA,CACD,KAAKO,KAAL,CAAaA,KAAb,CAAqB;AACrB,KAAKK,QAAL,CAAgBJ,QAAhB,CAA2B;AAC3B,CAduB,CAAzB,CAiBA;AACA;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAEC,WAAF,CAAgC,IAAjBnB,CAAAA,KAAiB,2DAAT,IAAS,CAC3D,GAAIW,CAAAA,GAAG,CAAGV,MAAM,CAACmB,IAAP,CAAaD,WAAb,CAAV,CAD2D,cAE/BtB,QAAQ,CAACsB,WAAW,CAACR,GAAD,CAAX,CAAiBU,YAAjB,EAAiC,IAAlC,CAFuB,wCAEnDT,KAFmD,eAE5CK,QAF4C,eAEkB;AAC7E;AACA;AAEArB,SAAS,CAAC,UAAM,CACf;AACAE,SAAS,CAACE,KAAK,EAAIW,GAAV,CAAT,CAA0Bb,SAAS,CAACE,KAAD,CAAT,EAAoB,EAA9C,CAEAC,MAAM,CAACqB,MAAP,CAAeH,WAAW,CAACR,GAAD,CAA1B,CAAiCL,gBAAjC,EACAa,WAAW,CAACR,GAAD,CAAX,CAAiBD,IAAjB,CAAuBV,KAAvB,CAA8BW,GAA9B,CAAmCC,KAAnC,CAA0CK,QAA1C,EACAhB,MAAM,CAACqB,MAAP,CAAexB,SAAS,CAACE,KAAK,EAAIW,GAAV,CAAxB,CAAwCX,KAAK,CAAGmB,WAAH,CAAiBA,WAAW,CAACR,GAAD,CAAzE,EAEA,CARQ,CAQN,EARM,CAAT,CAUA,MAAO,CAAEC,KAAF,CAASK,QAAT,CAAP,CACA,CAjBM,CAmBP,cAAeC,CAAAA,YAAf,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Collect hooks, references and other needed data that can be accessed wherever it's imported.\n * Names, structure and methods are all still WIP. As this is the first iteration of the\n * the module.\n */\nimport { useEffect, useState } from 'react';\n\n// global data, references, functions and hooks\nexport const globalObj = {};\nglobalObj.getOffsets = function(group) {\n\tObject.values(this[group]).forEach( e => e.getOffsetY());\n}\n// blueprint of method object that's copied and merged with the reference object\nconst globalObjMethods = {\n\t// ref offset getter\n\tgetOffsetY() {\n\t\tthis.offsetY = this.ref.offsetTop;\n\t},\n\tinit( group, key, state, dispatch ) {\t\t// initial method with hook assignment\n\t\tif ( this.ref ) {\n\t\t\tthis.ref = this.ref.current; \t// element reference\n\t\t\tthis.ref.zKey = key[0];\n\t\t\tthis.ref.zEl = this;\t\t// for easy pairing and execution of dispatch with observer ***check memory usage***\n\t\t\tthis.getOffsetY();\n\t\t}\n\t\tthis.state = state;\t\t// component 'state'\n\t\tthis.setState = dispatch;\t\t// component hook 'setState'\n\t},\n}\n\n/**\n * Global assignment of custom hooks for individual elements\n * @param {React.ElementRef<HTMLElement>} objectEntry\n */\nexport const useGlobalObj = ( objectEntry, group = null) => {\n\tlet key = Object.keys( objectEntry );\n\tconst [ state, setState ] = useState(objectEntry[key].initialState || null);\t// custom hook\n\t// when components mounts, we create their object entry\n\t// and initialize the object\n\n\tuseEffect(() => {\n\t\t// we check if the group property is defined and if that group already exist in the global object\n\t\tglobalObj[group || key] = globalObj[group] || {};\n\n\t\tObject.assign( objectEntry[key], globalObjMethods );\n\t\tobjectEntry[key].init( group, key, state, setState );\n\t\tObject.assign( globalObj[group || key], group ? objectEntry : objectEntry[key]  );\n\n\t}, []);\n\n\treturn [ state, setState ];\n}\n\nexport default useGlobalObj;\n\n\n/**\n * Known issue **\n *\n * Currently a few component references are not initialized when root is mounted.\n * Requiring recalculation of element offsets. And while we can get them every time directly from the\n * references, those are reads we can spare the browser.\n * We can otherwise get them individually once at the start, and then on known changes.\n */"]},"metadata":{},"sourceType":"module"}