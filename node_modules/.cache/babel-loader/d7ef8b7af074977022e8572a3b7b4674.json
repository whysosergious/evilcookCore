{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\n/**\n * Everything related to viewport\n */\nimport React, { useEffect } from 'react';\nconst _local = {\n  height: window.innerHeight,\n  width: window.innerWidth,\n  device: 'mobile',\n  orientation: 'portrait',\n  linked: [],\n\n  link(f) {\n    this.linked.push(f);\n  },\n\n  calc() {\n    this.height = window.innerHeight;\n    this.width = window.innerWidth;\n    this.device = this.width < 500 ? 'mobile' : this.width > 950 ? 'desctop' : 'pad';\n    this.orientation = this.height < this.width ? 'landscape' : 'portrait';\n  },\n\n  setVh() {\n    let vh = `${this.height / 100}px`;\n    document.documentElement.style.setProperty('--vh', vh);\n  },\n\n  trigger() {\n    this.linked.forEach(f => f());\n  }\n\n};\n\n_local.calc();\n\nlet currentDevice = _local.device; // let currentOrientation = '';\n\nlet tick = false;\n\nconst ViewportLogic = props => {\n  _s();\n\n  _local.setVh();\n\n  useEffect(() => {\n    const handleResize = event => {\n      _local.calc(); // conditionallly trigger rerenders and functions in our componenets\n\n\n      if (!tick && _local.device !== currentDevice) {\n        // the frame request and tick are not required here but I want to throttle updates\n        window.requestAnimationFrame(() => {\n          _local.trigger();\n\n          tick = false;\n          currentDevice = _local.device;\n        });\n        tick = true;\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ViewportLogic, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ViewportLogic;\nexport { ViewportLogic };\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewportLogic\");","map":{"version":3,"sources":["C:/webwork/olivertwist/src/logic/viewport.jsx"],"names":["React","useEffect","_local","height","window","innerHeight","width","innerWidth","device","orientation","linked","link","f","push","calc","setVh","vh","document","documentElement","style","setProperty","trigger","forEach","currentDevice","tick","ViewportLogic","props","handleResize","event","requestAnimationFrame","addEventListener"],"mappings":";;;;;AAAA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,MAAM,EAAEC,MAAM,CAACC,WADD;AAEdC,EAAAA,KAAK,EAAEF,MAAM,CAACG,UAFA;AAGdC,EAAAA,MAAM,EAAE,QAHM;AAIdC,EAAAA,WAAW,EAAE,UAJC;AAKdC,EAAAA,MAAM,EAAE,EALM;;AAMdC,EAAAA,IAAI,CAAEC,CAAF,EAAM;AACT,SAAKF,MAAL,CAAYG,IAAZ,CAAkBD,CAAlB;AACA,GARa;;AASdE,EAAAA,IAAI,GAAG;AACN,SAAKX,MAAL,GAAcC,MAAM,CAACC,WAArB;AACA,SAAKC,KAAL,GAAaF,MAAM,CAACG,UAApB;AACA,SAAKC,MAAL,GAAc,KAAKF,KAAL,GAAa,GAAb,GAAmB,QAAnB,GAA8B,KAAKA,KAAL,GAAa,GAAb,GAAmB,SAAnB,GAA+B,KAA3E;AACA,SAAKG,WAAL,GAAmB,KAAKN,MAAL,GAAc,KAAKG,KAAnB,GAA2B,WAA3B,GAAyC,UAA5D;AACA,GAda;;AAedS,EAAAA,KAAK,GAAG;AACP,QAAIC,EAAE,GAAI,GAAE,KAAKb,MAAL,GAAc,GAAI,IAA9B;AACAc,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,WAA/B,CAA2C,MAA3C,EAAmDJ,EAAnD;AACA,GAlBa;;AAmBdK,EAAAA,OAAO,GAAG;AACT,SAAKX,MAAL,CAAYY,OAAZ,CAAoBV,CAAC,IAAIA,CAAC,EAA1B;AACA;;AArBa,CAAf;;AAuBAV,MAAM,CAACY,IAAP;;AACA,IAAIS,aAAa,GAAGrB,MAAM,CAACM,MAA3B,C,CACA;;AACA,IAAIgB,IAAI,GAAG,KAAX;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAE9BxB,EAAAA,MAAM,CAACa,KAAP;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AAEf,UAAM0B,YAAY,GAAGC,KAAK,IAAI;AAE7B1B,MAAAA,MAAM,CAACY,IAAP,GAF6B,CAI7B;;;AACA,UAAI,CAACU,IAAD,IAAStB,MAAM,CAACM,MAAP,KAAkBe,aAA/B,EAA8C;AAE7C;AACAnB,QAAAA,MAAM,CAACyB,qBAAP,CAA6B,MAAM;AAElC3B,UAAAA,MAAM,CAACmB,OAAP;;AAEAG,UAAAA,IAAI,GAAG,KAAP;AACAD,UAAAA,aAAa,GAAGrB,MAAM,CAACM,MAAvB;AACA,SAND;AAOAgB,QAAAA,IAAI,GAAG,IAAP;AACA;AACD,KAjBD;;AAmBApB,IAAAA,MAAM,CAAC0B,gBAAP,CAAyB,QAAzB,EAAmCH,YAAnC;AACA,GAtBQ,CAAT;AAyBA,sBACC,qCADD;AAMA,CAnCD;;GAAMF,a;;KAAAA,a;AAqCN,SAASA,aAAT","sourcesContent":["/**\n * Everything related to viewport\n */\nimport React, { useEffect } from 'react';\n\nconst _local = {\n\theight: window.innerHeight,\n\twidth: window.innerWidth,\n\tdevice: 'mobile',\n\torientation: 'portrait',\n\tlinked: [],\n\tlink( f ) {\n\t\tthis.linked.push( f );\n\t},\n\tcalc() {\n\t\tthis.height = window.innerHeight;\n\t\tthis.width = window.innerWidth;\n\t\tthis.device = this.width < 500 ? 'mobile' : this.width > 950 ? 'desctop' : 'pad' ;\n\t\tthis.orientation = this.height < this.width ? 'landscape' : 'portrait' ;\n\t},\n\tsetVh() {\n\t\tlet vh = `${this.height / 100}px`;\n\t\tdocument.documentElement.style.setProperty('--vh', vh);\n\t},\n\ttrigger() {\n\t\tthis.linked.forEach(f => f());\n\t},\n}\n_local.calc();\nlet currentDevice = _local.device;\n// let currentOrientation = '';\nlet tick = false;\n\nconst ViewportLogic = props => {\n\n\t_local.setVh();\n\n\tuseEffect(() => {\n\n\t\tconst handleResize = event => {\n\n\t\t\t_local.calc();\n\n\t\t\t// conditionallly trigger rerenders and functions in our componenets\n\t\t\tif (!tick && _local.device !== currentDevice) {\n\n\t\t\t\t// the frame request and tick are not required here but I want to throttle updates\n\t\t\t\twindow.requestAnimationFrame(() => {\n\n\t\t\t\t\t_local.trigger();\n\n\t\t\t\t\ttick = false;\n\t\t\t\t\tcurrentDevice = _local.device;\n\t\t\t\t});\n\t\t\t\ttick = true;\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener( 'resize', handleResize );\n\t});\n\n\n\treturn (\n\t\t<>\n\t\t\t{/* lets see if it works with an empty element */}\n\t\t\t{/* Will also try to return 'null' */}\n\t\t</>\n\t);\n}\n\nexport { ViewportLogic }"]},"metadata":{},"sourceType":"module"}