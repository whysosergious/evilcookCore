{"ast":null,"code":"var _s = $RefreshSig$();\n\n/**\n * Collect hooks, references and other needed data that can be accessed wherever it's imported.\n * Names, structure and methods are all still WIP. As this is the first iteration of the\n * the module.\n */\nimport { useEffect, useState } from 'react'; // global data, references, functions and hooks\n\nexport const globalObj = {};\n\nglobalObj.getOffsets = function (group) {\n  Object.values(this[group]).forEach(e => e.getOffsetY());\n}; // blueprint of method object that's copied and merged with the reference object\n\n\nconst globalObjMethods = {\n  // ref offset getter\n  getOffsetY() {\n    this.offsetY = this.ref.offsetTop;\n  },\n\n  init(group, key, state, dispatch) {\n    // initial method with hook assignment\n    if (this.ref) {\n      this.ref = this.ref.current; // element reference\n\n      this.ref.zKey = key[0];\n      this.ref.zEl = this; // for easy pairing and execution of dispatch with observer ***check memory usage***\n\n      this.getOffsetY();\n    }\n\n    this.state = state; // component 'state'\n\n    this.setState = dispatch; // component hook 'setState'\n  }\n\n};\n/**\n * Global assignment of custom hooks for individual elements\n * @param {React.ElementRef<HTMLElement>} objectEntry\n */\n\nexport const useGlobalObj = (objectEntry, group = null) => {\n  _s();\n\n  let key = Object.keys(objectEntry);\n  const [state, setState] = useState(objectEntry[key].initialState || null); // custom hook\n  // when components mounts, we create their object entry\n  // and initialize the object\n\n  useEffect(() => {\n    // we check if the group property is defined and if that group already exist in the global object\n    globalObj[group || key] = globalObj[group] || {};\n    Object.assign(objectEntry[key], globalObjMethods);\n    objectEntry[key].init(group, key, state, setState);\n    Object.assign(globalObj[group || key], group ? objectEntry : objectEntry[key]);\n  }, []);\n  return [state, setState];\n};\n\n_s(useGlobalObj, \"vZrvYDF03KkYnauLlcirK1MOEi4=\");\n\nexport default useGlobalObj;\n/**\n * Known issue **\n *\n * Currently a few component references are not initialized when root is mounted.\n * Requiring recalculation of element offsets. And while we can get them every time directly from the\n * references, those are reads we can spare the browser.\n * We can otherwise get them individually once at the start, and then on known changes.\n */","map":{"version":3,"sources":["C:/webwork/olivertwist/src/logic/DEPzergski-global-object.js"],"names":["useEffect","useState","globalObj","getOffsets","group","Object","values","forEach","e","getOffsetY","globalObjMethods","offsetY","ref","offsetTop","init","key","state","dispatch","current","zKey","zEl","setState","useGlobalObj","objectEntry","keys","initialState","assign"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,EAAlB;;AACPA,SAAS,CAACC,UAAV,GAAuB,UAASC,KAAT,EAAgB;AACtCC,EAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,KAAL,CAAd,EAA2BG,OAA3B,CAAoCC,CAAC,IAAIA,CAAC,CAACC,UAAF,EAAzC;AACA,CAFD,C,CAGA;;;AACA,MAAMC,gBAAgB,GAAG;AACxB;AACAD,EAAAA,UAAU,GAAG;AACZ,SAAKE,OAAL,GAAe,KAAKC,GAAL,CAASC,SAAxB;AACA,GAJuB;;AAKxBC,EAAAA,IAAI,CAAEV,KAAF,EAASW,GAAT,EAAcC,KAAd,EAAqBC,QAArB,EAAgC;AAAG;AACtC,QAAK,KAAKL,GAAV,EAAgB;AACf,WAAKA,GAAL,GAAW,KAAKA,GAAL,CAASM,OAApB,CADe,CACe;;AAC9B,WAAKN,GAAL,CAASO,IAAT,GAAgBJ,GAAG,CAAC,CAAD,CAAnB;AACA,WAAKH,GAAL,CAASQ,GAAT,GAAe,IAAf,CAHe,CAGO;;AACtB,WAAKX,UAAL;AACA;;AACD,SAAKO,KAAL,GAAaA,KAAb,CAPmC,CAOd;;AACrB,SAAKK,QAAL,GAAgBJ,QAAhB,CARmC,CAQR;AAC3B;;AAduB,CAAzB;AAiBA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,YAAY,GAAG,CAAEC,WAAF,EAAenB,KAAK,GAAG,IAAvB,KAAgC;AAAA;;AAC3D,MAAIW,GAAG,GAAGV,MAAM,CAACmB,IAAP,CAAaD,WAAb,CAAV;AACA,QAAM,CAAEP,KAAF,EAASK,QAAT,IAAsBpB,QAAQ,CAACsB,WAAW,CAACR,GAAD,CAAX,CAAiBU,YAAjB,IAAiC,IAAlC,CAApC,CAF2D,CAEkB;AAC7E;AACA;;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACf;AACAE,IAAAA,SAAS,CAACE,KAAK,IAAIW,GAAV,CAAT,GAA0Bb,SAAS,CAACE,KAAD,CAAT,IAAoB,EAA9C;AAEAC,IAAAA,MAAM,CAACqB,MAAP,CAAeH,WAAW,CAACR,GAAD,CAA1B,EAAiCL,gBAAjC;AACAa,IAAAA,WAAW,CAACR,GAAD,CAAX,CAAiBD,IAAjB,CAAuBV,KAAvB,EAA8BW,GAA9B,EAAmCC,KAAnC,EAA0CK,QAA1C;AACAhB,IAAAA,MAAM,CAACqB,MAAP,CAAexB,SAAS,CAACE,KAAK,IAAIW,GAAV,CAAxB,EAAwCX,KAAK,GAAGmB,WAAH,GAAiBA,WAAW,CAACR,GAAD,CAAzE;AAEA,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,CAAEC,KAAF,EAASK,QAAT,CAAP;AACA,CAjBM;;GAAMC,Y;;AAmBb,eAAeA,YAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Collect hooks, references and other needed data that can be accessed wherever it's imported.\n * Names, structure and methods are all still WIP. As this is the first iteration of the\n * the module.\n */\nimport { useEffect, useState } from 'react';\n\n// global data, references, functions and hooks\nexport const globalObj = {};\nglobalObj.getOffsets = function(group) {\n\tObject.values(this[group]).forEach( e => e.getOffsetY());\n}\n// blueprint of method object that's copied and merged with the reference object\nconst globalObjMethods = {\n\t// ref offset getter\n\tgetOffsetY() {\n\t\tthis.offsetY = this.ref.offsetTop;\n\t},\n\tinit( group, key, state, dispatch ) {\t\t// initial method with hook assignment\n\t\tif ( this.ref ) {\n\t\t\tthis.ref = this.ref.current; \t// element reference\n\t\t\tthis.ref.zKey = key[0];\n\t\t\tthis.ref.zEl = this;\t\t// for easy pairing and execution of dispatch with observer ***check memory usage***\n\t\t\tthis.getOffsetY();\n\t\t}\n\t\tthis.state = state;\t\t// component 'state'\n\t\tthis.setState = dispatch;\t\t// component hook 'setState'\n\t},\n}\n\n/**\n * Global assignment of custom hooks for individual elements\n * @param {React.ElementRef<HTMLElement>} objectEntry\n */\nexport const useGlobalObj = ( objectEntry, group = null) => {\n\tlet key = Object.keys( objectEntry );\n\tconst [ state, setState ] = useState(objectEntry[key].initialState || null);\t// custom hook\n\t// when components mounts, we create their object entry\n\t// and initialize the object\n\n\tuseEffect(() => {\n\t\t// we check if the group property is defined and if that group already exist in the global object\n\t\tglobalObj[group || key] = globalObj[group] || {};\n\n\t\tObject.assign( objectEntry[key], globalObjMethods );\n\t\tobjectEntry[key].init( group, key, state, setState );\n\t\tObject.assign( globalObj[group || key], group ? objectEntry : objectEntry[key]  );\n\n\t}, []);\n\n\treturn [ state, setState ];\n}\n\nexport default useGlobalObj;\n\n\n/**\n * Known issue **\n *\n * Currently a few component references are not initialized when root is mounted.\n * Requiring recalculation of element offsets. And while we can get them every time directly from the\n * references, those are reads we can spare the browser.\n * We can otherwise get them individually once at the start, and then on known changes.\n */"]},"metadata":{},"sourceType":"module"}